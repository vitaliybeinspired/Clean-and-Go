


    


import java.io.BufferedReader;

import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.*;

    public class Template {

        public static void main(String args[]) {
            Connection conn = null;
            try {

                Class.forName("com.mysql.cj.jdbc.Driver");
                String url = "jdbc:mysql://localhost:3306/CleanandGo?serverTimezone=UTC&useSSL=TRUE";
                String user, pass;
                System.out.println("Database Login");
                user = readEntry("userid : ");
                pass = readEntry("password: ");
                conn = DriverManager.getConnection(url, user, pass);




// ********************** MERGE CASE WITH 2 OTHERS BELOW
                    switch (ch.charAt(0)) {
                        case '1': ProductSuppliers(conn);
                            break;
                        case '2':
                            CleaningSuppliesAlert(conn);
                            break;
                        case 'q': done = true;
                            break;
                        default:
                            System.out.println(" Not a valid option ");
                    } //switch
                } while (!done);
        }
// ********************* MERGE THIS WITH SECTION BELOW
             switch (ch.charAt(0)) {
                        case 'a':
                        	findWeeklyEquipmentMschedule(conn);
                        	break;
                        case 'b':
                        	findAvgDailyEquipmentUsage(conn);
                        	break;
                        case 'c':
                        	findEmpWeeklySchedule(conn);
                        	break;
                        case 'q': done = true;
                            break;
                        default:
                            System.out.println(" Not a valid option ");
                    } //switch
                } while (!done);
// ****************************************** MERGE ABOVE WITH BELOW

                boolean done = false;
                if (correctLogin(conn)) { // must be an administrator to manipulate database
	                do {
	                	printMenu();
	                    System.out.print("Type in your option: ");
	                    System.out.flush();
	                    String ch = readLine();
	                    System.out.println();
	                    switch (ch.charAt(0)) {
	                        case 'a': addEmployee(conn);
	                        	break;
	                        case 'b': addEquipment(conn);
	                        	break;
	                        case 'c': addService(conn);
	                        	break;
	                        //case 'd'; addCustomer(conn);
	                        //	break;
	                        case 'q': done = true;
	                            break;
	                        default:
	                            System.out.println(" Not a valid option ");
	                    } 
	                } while (!done);
// ******************************************	MERGE ABOVE SECTION WITH UPPER SECTION		
                }

            } catch (ClassNotFoundException e) {
                System.out.println("Could not load the driver");
            } catch (SQLException ex) {
                System.out.println(ex);
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException e) { /* ignored */}
                }
            }
        }
        
        
        private static boolean correctLogin(Connection conn)throws SQLException, IOException {
        	// difference between connecting to database with username and password vs being an adminstrator? 
            System.out.println("Administration login required");
        	String user = readEntry("userid : ");
            String pass = readEntry("password: ");
            String url = "jdbc:mysql://localhost:3306/CleanandGo?serverTimezone=UTC&useSSL=TRUE";
            conn = DriverManager.getConnection(url, user, pass);
        	return true;
        	
        	
        }
        
        
        // inserts a row in the Employee entity by asking user for inputs
        private static void addEmployee(Connection conn) throws SQLException, IOException {        	
    			String insertIntoEmployee = "Insert into Employee values(?,?,?,?,?,?,?,?,?,?)";
        		PreparedStatement inserIntoEmployeeStatement = conn.prepareStatement(insertIntoEmployee);
                    		
         		String SSN = readEntry("Enter employee SSN: ");
         		inserIntoEmployeeStatement.setString(1, SSN); 
         		String Fname = readEntry("Enter First Name: ");
         		inserIntoEmployeeStatement.setString(2, Fname);            
         		String Minitial = readEntry("Enter Middle Initial: ");
         		inserIntoEmployeeStatement.setString(3, Minitial);
         		String Lname = readEntry("Enter Last Name: ");
         		inserIntoEmployeeStatement.setString(4, Lname);
         		String gender = readEntry("Enter Gender: ");
         		inserIntoEmployeeStatement.setString(5, gender);
        		String Date = readEntry("Enter Date Hired: ");
        		inserIntoEmployeeStatement.setString(6, Date); 
         		String position = readEntry("Enter Position: ");
         		inserIntoEmployeeStatement.setString(7, position);
         		String salary = readEntry("Enter Salary: ");
         		inserIntoEmployeeStatement.setString(8, salary);
         		String address = readEntry("Enter Address: ");
         		inserIntoEmployeeStatement.setString(9, address);
         		String telephone = readEntry("Enter Telephone: ");
         		inserIntoEmployeeStatement.setString(10, telephone);
        
         		inserIntoEmployeeStatement.executeUpdate();
            }
        
        // Adds a row in assets Entity and a row in Equipment entity from user inputs 
        private static void addEquipment(Connection conn) throws SQLException, IOException {        		
        	
        	// gets row count from assets Entity
        	String AssetsCount = "SELECT COUNT(*) FROM Assets";
        	Statement AssetsCountStatement = conn.createStatement();
			ResultSet rs = AssetsCountStatement.executeQuery(AssetsCount);			
			
			// inserts into assets by incrementing by one
        	String insertIntoAssets = "Insert into Assets values(?)";
    		PreparedStatement insertIntoAssetsStatement = conn.prepareStatement(insertIntoAssets);

    		
    		// inserts into equipment with the value of the assets count and user inputs
        	String insertIntoEquipment = "Insert into Equipment values(?,?,?,?,?)";
    		PreparedStatement insertIntoEquipmentStatement = conn.prepareStatement(insertIntoEquipment);
        	
			while(rs.next()){
			    int count = rs.getInt("COUNT(*)");
			    insertIntoAssetsStatement.setInt(1, count + 1);
			    insertIntoAssetsStatement.executeUpdate();
	    		insertIntoEquipmentStatement.setInt(2, count); 
			  }

     		String E_ID = readEntry("Enter Equipment ID: ");
     		insertIntoEquipmentStatement.setString(1, E_ID);            
     		String Brand_Name = readEntry("Enter Brand Name: ");
     		insertIntoEquipmentStatement.setString(3, Brand_Name);
     		String E_Type = readEntry("Enter Equipment Type: ");
     		insertIntoEquipmentStatement.setString(4, E_Type);
     		String MaintPrice = readEntry("Enter Maintaince Price: ");
     		insertIntoEquipmentStatement.setString(5, MaintPrice);    	
    
     		insertIntoEquipmentStatement.executeUpdate();
}
        
        
        // adds a row in Service entity by asking user for inputs
        private static void addService(Connection conn) throws SQLException, IOException {        	
          	String ServiceCount = "SELECT COUNT(*) FROM Service";
        	Statement ServiceCountStatement = conn.createStatement();
			ResultSet rs = ServiceCountStatement.executeQuery(ServiceCount);
			
			String insertIntoService = "Insert into Service values(?,?,?,?,?)";
    		PreparedStatement insertIntoServiceStatement = conn.prepareStatement(insertIntoService);
    		
			while(rs.next()){
			    int count = rs.getInt("COUNT(*)");
	    		insertIntoServiceStatement.setInt(1, count + 1); // increments service_ID
			}
			
     		String S_Name = readEntry("Enter Service Name: ");
     		insertIntoServiceStatement.setString(2, S_Name);            
     		String Description = readEntry("Enter Description: ");
     		insertIntoServiceStatement.setString(3, Description);
     		String Rate = readEntry("Enter Rate: ");
     		insertIntoServiceStatement.setString(4, Rate);
     		String Duration = readEntry("Enter Duration: ");
     		insertIntoServiceStatement.setString(5, Duration);    	
    		
     		insertIntoServiceStatement.executeUpdate();
       }

        static String readEntry(String prompt) {
            try {
                StringBuffer buffer = new StringBuffer();
                System.out.print(prompt);
                System.out.flush();
                int c = System.in.read();
                while(c != '\n' && c != -1) {
                    buffer.append((char)c);
                    c = System.in.read();
                }
                return buffer.toString().trim();
            } catch (IOException e) {
                return "";
            }
        }

        private static String readLine() {
            InputStreamReader isr = new InputStreamReader(System.in);
            BufferedReader br = new BufferedReader(isr, 1);
            String line = "";

            try {
                line = br.readLine();
            } catch (IOException e) {
                System.out.println("Error in SimpleIO.readLine: " +
                        "IOException was thrown");
                System.exit(1);
            }
            return line;
        }


    
    
    

       

        
        private static void findWeeklyEquipmentMschedule(Connection conn) throws SQLException, IOException {
        	Statement stmt = conn.createStatement();
        	//enter date of beginning/end of week
        	String startDay, endDay;
        	startDay = readEntry("Enter Week Start Date: "); //2019-11-18
        	endDay = readEntry("Enter Week End Date: "); //2019-11-24
        	String query = "select ME.NextMaintDate as WeeklyMaintenanceSchedule,  ME.EquipmentID\n" + 
        					"from MSchedule as ME\n" + 
        					"where (ME.EquipmentID = 01 and  ME.NextMaintDate between" + "\"" + startDay + "\"" + " and" + "\"" + endDay + "\"" + "); ";
        	PreparedStatement p = conn.prepareStatement(query);
        	
        	ResultSet rset;
        	
        	ResultSet r = stmt.executeQuery(query);
        	System.out.println("          Weekly Maintenance Schedule of Equipment ");
        	System.out.println("--------------------------------------------------\n");
        	while(r.next()) {
        		String WeeklyMaintenanceSchedule = r.getString(1);
        		System.out.println("Maintenance needed: " + WeeklyMaintenanceSchedule);
        	}
        	
        	System.out.println("--------------------------------------------------\n");
        	
        }
        
        private static void findEmpWeeklySchedule(Connection conn) throws SQLException, IOException {
        	Statement stmt = conn.createStatement();
        	String empID;
        	empID = readEntry("Enter Employee SSN: ");
        	System.out.println();
        	
        	String query = " select S.Workday, S.StartTime, S.EndTime\n" + 
        			"from Employee as E left join Eschedule as S\n" + 
        			"on E.SSN = S.ESSN\n" + 
        			"where (E.SSN = " + empID + " and S.Workday between \"2019-11-18\" and \"2019-11-24\");";
        	PreparedStatement p = conn.prepareStatement(query);
        	
        	ResultSet rset;
        	
        	ResultSet r = stmt.executeQuery(query);
        	System.out.println("          Employee Schedule for " + empID );
        	System.out.println("--------------------------------------------------\n");
        	while(r.next()) {
        		String Workday = r.getString(1);
        		String StartTime = r.getString(2);
        		String EndTime = r.getString(3);
        		System.out.println("Workday: " + Workday + ", " + "StartTime: " + StartTime + ", " + "EndTime: " + EndTime);
        	}
        	
        	System.out.println("--------------------------------------------------\n");
        	
        }
        
        private static void findAvgDailyEquipmentUsage(Connection conn) throws SQLException, IOException {
        	Statement stmt = conn.createStatement();
        	String query = "select E.E_ID as EquipmentID, count(U.A_ID)/365 as AvgDailyUsage\n" + 
        				"from Equipment as E left join Uses as U\n" + 
        				"on E.A_ID = U.A_ID\n" + 
        				"where (U.TimeofUse between \"2019-01-01 00:00:00\" and \"2019-12-31 23:59:59\")\n" + 
        				"group by E.E_ID asc;";
        	PreparedStatement p = conn.prepareStatement(query);
        	
        	ResultSet rset;
        	
        	ResultSet r = stmt.executeQuery(query);
        	System.out.println("          Equipment Average Daily Usage ");
        	System.out.println("--------------------------------------------------\n");
        	while(r.next()) {
        		String EquipmentID = r.getString(1);
        		String AvgUsage = r.getString(2);
        		System.out.println("EquipmentID: " + EquipmentID + ", " + "AvgUsage: " + AvgUsage);
        	}
        	
        	System.out.println("--------------------------------------------------\n");
        	
        }







        private static void ProductSuppliers(Connection conn) throws SQLException, IOException {

            //STEP1: CREATE VARIABLE OF TYPE STATEMENT
            Statement stmt = conn.createStatement();
           // STEP 2 DEFINE A STRING THAT IS = TO YOUR query SQL Statement
           // String query = ""
            String query = "select Supplier_Name, Cname as Item\n" +
                    "from Supplier join Sells on Supplier.Supplier_ID = Sells.Supplier_ID \n" +
                    "\t\t\t  join Assets on Sells.A_ID = Assets.A_ID \n" +
                    "              join CleanSupplies on Assets.A_ID = CleanSupplies.A_ID;";

            stmt = conn.prepareStatement(query);

            System.out.println("    Product Suppliers");
            System.out.println("--------------------------------------------------\n");
            // Step 3: Declare a variable with ResultSet type
            ResultSet rset = stmt.executeQuery(query);
            while(rset.next()){
                String Supplier_Name = rset.getString(1);
                String Item = rset.getString(2);
                System.out.println(Supplier_Name + ": " + Item);
            }

            //Execute your Query and store the return in the declared variable from step 3
            // Write a loop to read all the returned rows from the query execution
           //Close the statement

        }


        private static void CleaningSuppliesAlert(Connection conn) throws SQLException, IOException {
            //STEP1: CREATE VARIABLE OF TYPE STATEMENT
            Statement stmt = conn.createStatement();
            // STEP 2 DEFINE A STRING THAT IS = TO YOUR query SQL Statement
            // String query = ""
            String query = "select *\n" +
                    "from CleanSupplies\n" +
                    "where Inventory < SafetyInfo;";
            stmt = conn.prepareStatement(query);

            System.out.println("    Cleaning Supplies Alert");
            System.out.println("--------------------------------------------------\n");
            // Step 3: Declare a variable with ResultSet type
            ResultSet rset = stmt.executeQuery(query);
            while(rset.next()){
                String A_ID = rset.getString(1);
                String CName = rset.getString(2);
                String CUsage = rset.getString(3);
                String Inventory = rset.getString(4);
                String SafetyInfo = rset.getString(5);

                System.out.println(A_ID + " " + CName + " " + CUsage + " " + Inventory + " " + SafetyInfo);
            }



        }






/// NOT PART OF THIS MENU
        private static void AnnualSupplyExpenses(Connection conn) throws SQLException, IOException {

            //STEP1: CREATE VARIABLE OF TYPE STATEMENT
            Statement stmt = conn.createStatement();
            // STEP 2 DEFINE A STRING THAT IS = TO YOUR query SQL Statement
            // String query = ""
            String query = "select sum(AmountDue) as AnnualSupplyExpense\n" +
                    "from Sells join Assets on Sells.A_ID = Assets.A_ID\n" +
                    "\t\t   join CleanSupplies on Assets.A_ID = CleanSupplies.A_ID;";
            stmt = conn.prepareStatement(query);

            System.out.println("    Annual Supply Expenses");
            System.out.println("--------------------------------------------------\n");
            // Step 3: Declare a variable with ResultSet type
            ResultSet rset = stmt.executeQuery(query);
            while(rset.next()){
                double Expense = rset.getDouble(1);
                System.out.println("$" + Expense);
            }


        }




    }




// ***************** MERGE BOTH MENUS. THIS INSERT MENU IS A SUB OF MAIN MENU
        private static void printMenu() {
        	// check correct login before going to this menu
        	System.out.println("\n        INSERT OPTIONS ");
            System.out.println("(a) Add Employee. ");
            System.out.println("(b) Add Equipment. ");
            System.out.println("(c) Add Service. ");
            System.out.println("(d) Add Customer. ");
            System.out.println("(q) Main Menu. \n");
        }

    }

// ************** MERGE BOTH MENUS
        private static void printMenu() {
            System.out.println("\n        QUERY OPTIONS ");
            System.out.println("(a) Weekly Maintenance Schedule of Equipment.");
            System.out.println("(b) Average Daily Usage of Equipment for the current year.");
            System.out.println("(c) Print Employee Schedule.");
            
            System.out.println("(q) Quit. \n");
        }

    }
    // ************* MERGE MENUS
            private static void printMenu() {
            System.out.println("\n *************************************" +
                               "\n     2.Supplies " +
                               "\n *************************************");
            System.out.println("(1) Product suppliers. ");
            System.out.println("(2) Cleaning Supplies Alert. ");
            System.out.println("(q) Quit. \n");
        }
